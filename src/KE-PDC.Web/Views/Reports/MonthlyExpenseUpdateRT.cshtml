@{
    ViewData["Title"] = "Monthly Expense Update for RT";
}

@section links {
    <link rel="stylesheet" href="~/lib/bootstrap-select/dist/css/bootstrap-select.css" />
    <link rel="stylesheet" href="~/lib/jquery.bootgrid/dist/jquery.bootgrid.min.css" />
    <link rel="stylesheet" href="~/assets/stylesheets/confirm.css" />
    <style>
        #modalUpdateDetail .fileinput-new .btn-file {
            min-width: 106px;
        }
    </style>
}

@section scripts {
    <script src="~/lib/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
    <script src="~/lib/jquery.bootgrid/dist/jquery.bootgrid.min.js"></script>
    <script src="~/lib/jquery-mask-plugin/dist/jquery.mask.min.js"></script>
    <script src="~/lib/jquery-maskmoney/dist/jquery.maskMoney.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/moment/min/moment-with-locales.min.js"></script>
    <script src="~/lib/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
    <script src="~/lib/bootstrap-tagsinput/dist/bootstrap-tagsinput.js"></script>
    <script src="~/lib/matchheight/dist/jquery.matchHeight-min.js"></script>
    <script src="~/lib/jasny-bootstrap/js/fileinput.js"></script>
    <script src="~/assets/javascripts/bootstrap-select-default.js"></script>
    <script src="~/assets/javascripts/jquery.bootgrid-default.js"></script>
    <script src="~/assets/javascripts/jquery.bootstrap-datetimepicker.js"></script>
    <script src="~/assets/javascripts/jquery.validation-default.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var decimalToString = function (value) {
                return parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }
            var numericToString = function (value) {
                return parseInt(value).toLocaleString();
            }

            // MODAL UPDATE DETAIL
            // ======================
            var renderRow = function (targetIdSelected, value) {
                var target = $("#table" + targetIdSelected),
                td = $("<td></td>"),
                fileinput = "fileinput-new",
                trash = 0;

                if (value.attachment != null) {
                    fileinput = "fileinput-exists";
                }

                target.find("tr.init").hide();

                var PKG = {
                    @foreach (var package in ViewData["PackageAll"] as List<Package>) {
                        @:'@package.PackageID': "@package.PackageDesc",
                        }
                };

                if (targetIdSelected == "ServiceFeeSupply") {
                    td.append('<td><input disabled name="' + targetIdSelected + 'Item" type="text" value="' + PKG[value.itemDesc] + '" class="form-control input-sm name" autocomplete="off"></td>');
                    td.append('<td><input disabled name="' + targetIdSelected + 'Expense" class="form-control input-sm text-right expense" type="text" value="' + decimalToString(value.itemExpense) + '" autocomplete="off" data-target="' + targetIdSelected + '"></td>');
                    td.append('<td><input disabled name="' + targetIdSelected + 'Remark" class="form-control input-sm remark" type="text" value="' + (value.remark || '') + '" autocomplete="off"></td>');
                    td.append('<td><div class="fileinput ' + fileinput + ' p-0" data-provides="fileinput"><span class="btn btn-sm btn-outline-primary btn-file"><span class="fileinput-new"><i class="ion-upload"></i> Attach file</span><span class="fileinput-exists"><i class="ion-loop"></i> Change</span><input type="file" name="' + targetIdSelected + 'Attach"></span><span class="fileinput-filename sr-only"></span> <a href="#" data-dismiss="fileinput" class="btn btn-sm btn-primary fileinput-exists"><i class="ion-trash-b"></i></a></div></td>');
                    //td.find('[data-id="attachment"]').val(value.attachment);
                }
                else {
                    td.append('<td><input type="hidden" name="' + targetIdSelected + 'Trash" value="false" autocomplete="off" data-id="trash" /><button type="button" class="btn btn-link p-l-5 p-r-5" data-dismiss="row" data-target="' + targetIdSelected + '">&times;</button></td>');
                    td.append('<td><input type="hidden" name="' + targetIdSelected + 'ID" value="' + value.itemID + '" autocomplete="off" /><input name="' + targetIdSelected + 'Item" type="text" value="' + value.itemDesc + '" class="form-control input-sm name" autocomplete="off"></td>');
                    td.append('<td><input name="' + targetIdSelected + 'Expense" class="form-control input-sm text-right expense" type="text" value="' + decimalToString(value.itemExpense) + '" autocomplete="off" data-target="' + targetIdSelected + '"></td>');
                    td.append('<td><input name="' + targetIdSelected + 'Remark" class="form-control input-sm remark" type="text" value="' + (value.remark || '') + '" autocomplete="off"></td>');
                    td.append('<td><div class="fileinput ' + fileinput + ' p-0" data-provides="fileinput"><span class="btn btn-sm btn-outline-primary btn-file"><span class="fileinput-new"><i class="ion-upload"></i> Attach file</span><span class="fileinput-exists"><i class="ion-loop"></i> Change</span><input type="file" name="' + targetIdSelected + 'Attach"></span><span class="fileinput-filename sr-only"></span> <a href="#" data-dismiss="fileinput" class="btn btn-sm btn-primary fileinput-exists"><i class="ion-trash-b"></i></a></div></td>');
                    //td.find('[data-id="attachment"]').val(value.attachment);
                }

                target.prepend('<tr class="item">' + td.html() + '</tr>');
            },
            calMonthlyExpense = function (targetIdSelected) {
                var target = $("#table" + targetIdSelected),
                    totalAmount = 0,
                    totalExpense = 0;

                target.find('[name="' + targetIdSelected + 'Amount"]').filter(function () {
                    return $(this).parents("tr").css('display') !== 'none';
                }).each(function () {
                    var value = parseInt($(this).val().replace(/[^\d\.\-]/g, "") || 0);
                    totalAmount += value == "" ? 0 : value;
                });

                target.find('[name="' + targetIdSelected + 'Expense"]').filter(function () {
                    return $(this).parents("tr").css('display') !== 'none';
                }).each(function () {
                    var value = parseFloat($(this).val().replace(/[^\d\.\-]/g, "") || 0);
                    totalExpense += value == "" ? 0 : parseFloat(value);
                });

                $("#input" + targetIdSelected).val(decimalToString(totalExpense));

                if (targetIdSelected == "ServiceFeeFacility") {
                    var totalExpenseVat = totalExpense * 1.07;
                    $("#inputServiceFeeFacilityVat").val(decimalToString(totalExpenseVat));
                }

                if (targetIdSelected == "SalesPackage") {
                    $('#tableSalesPackage [data-column-id="totalAmount"]').text(numericToString(totalAmount));
                    $('#tableSalesPackage [data-column-id="totalExpense"]').text(decimalToString(totalExpense));
                }
            };

            $('#modalUpdateDetail').on("show.bs.modal", function () {
            }).on("hidden.bs.modal", function () {
                $(this).find("table:not(#tableSalesPackage, #tableServiceFeeFacility) tbody tr:not(.init)").remove()
                .end().find("fieldset").prop("disabled", false)
                .end().find("#inputManagementFee").prop("disabled", false)
                .end().find(".init").show()
                .end().find('.init input:not([data-id="trash"])').val("")
                .end().find(".collapse").collapse('hide')
                .end().find('.panel-heading input:not([type="hidden"])').val("")
                .end().find('#tableServiceFeeFacility input:not([type="hidden"])').val("")
                .end().find('#tableSalesPackage input:not([type="hidden"])').val("")
                .end().find('[name="SalesPackageExpense"]').next().text("")
                //.end().find(".fileinput").fileinput('reset');
            }).on("change", '[name="SalesPackageAmount"]', function () {
                var cost = $(this).data("cost"),
                    expense = cost * parseFloat($(this).val().replace(/[^\d\.\-]/g, "") || 0);

                $(this).parents("tr").find('[name="SalesPackageExpense"]').val(expense);
                $(this).parents("tr").find('[name="SalesPackageExpense"]').next().text(decimalToString(expense));
                calMonthlyExpense.call(this, "SalesPackage");
            }).on("change", "input.expense", function () {
                calMonthlyExpense.call(this, $(this).data("target"));
            });

            $('#modalUpdateDetail [data-command="new-row"]').on('click', function () {
                var target = $($(this).data("target")),
                    init = target.find(".init").clone()
                    .find("input").val("")
                    .end().find('[data-id="trash"]').val("false")
                    .end().find(".fileinput.fileinput-exists").removeClass("fileinput-exists").addClass("fileinput-new")
                    .end();

                target.append('<tr class="new">' + init.html() + '</tr>');
                $('#modalUpdateDetail').find('input.expense').maskMoney({
                    thousands: ',', decimal: '.', allowZero: true, precision: 2, allowNegative: true
                });
            });

            $('#modalUpdateDetail [data-command="reset-row"]').on('click', function () {
                var target = $(this).data("target"),
                    $target = $(target);

                $target.find("tr").show();
                $target.find("tr.init input").val("");
                $target.find('tr.init [data-id="trash"]').val("false");
                $target.find("tr.new").remove();
                calMonthlyExpense.call(this, target);
            });

            $("#modalUpdateDetail").on('click', '[data-dismiss="row"]', function () {
                var target = $(this).data("target"),
                    $target = $(target),
                    $tb = $(this).parents("table"),
                    $tr = $(this).parents("tr");

                if ($tr.hasClass("new")) {
                    $tr.remove();
                }
                else {
                    if ($tr.hasClass("item")) {
                        $tr.find('[data-id="trash"]').val("true");
                    }

                    $tr.hide();
                }

                var count = $tb.find("tbody tr").filter(function () {
                    return $(this).css('display') !== 'none';
                }).length;

                if (count < 1) {
                    $tb.find("tr.init input").val("");
                    $tb.find('tr.init [data-id="trash"]').val("false");
                    $tb.find("tr.init").show();
                }

                $tr.find("tr.init input").val(0);

                calMonthlyExpense.call(this, target);
            });


            // FORM SEARCH
            // ======================
            var searchFirstTime = true;
            var gridSearchResults;

            $('[type=reset]').click(function (e) {
                e.preventDefault();
                $(this).closest('form').get(0).reset();
                $("select").selectpicker('render');
            });

            $('form[data-toggle="search"]').validate({
                submitHandler: function (form) {
                    $.pageLoader("show");
                    var $form = $(form);

                    if (searchFirstTime) {

                        searchFirstTime = false;

                        gridSearchResults = $("#grid-search-results").bootgrid({
                            url: endpoint + "MonthlyExpense/Get",
                            requestHandler: function (request) {
                                var BranchList = $form.find('select[name="BranchList"]').val(),
                                    request = {
                                        BranchList: typeof BranchList == "object" ? BranchList.join(",") : BranchList,
                                        MonthYear: $form.find('input[name="MonthYear"]').val(),
                                        Type: "update",

                                        // Pagination
                                        page: request.current,
                                        perPage: request.rowCount,
                                        order: Object.keys(request.sort)[0],
                                        direction: request.sort[Object.keys(request.sort)[0]],
                                        searchPhrase: request.searchPhrase,
                                    };

                                $("#modalUpdateDetail").find('span[data-column-id="MonthYear"]').html($form.find('input[name="MonthYear"]').val());
                                $("#modalUpdateDetail").find('input[data-column-id="MonthYear"]').val($form.find('input[name="MonthYear"]').val());
                                $("#grid-search-results").data("export-params", request);

                                return request;
                            },
                            sorting: false,
                            templates: {
                                header: '<div id="{{ctx.id}}" class="{{css.header}}"><div class="row"><div class="col-md-4"><h2 class="card-title form-control-static">@SharedLocalizer["Search Results"]</h2></div><div class="col-md-8 actionBar"><p class="{{css.actions}}"></p><div class="btn-group m-l-20"><buttom class="btn btn-default" data-ke-action="export" data-ke-filetype="excel" data-ke-target="#grid-search-results">@SharedLocalizer["Export (Excel)"]</buttom><buttom class="btn btn-default hidden" data-ke-action="export" data-ke-filetype="pdf" data-ke-target="#grid-search-results"><i class="ion-document-text"></i> @SharedLocalizer["Export (PDF)"]</buttom></div></div></div></div>',
                            },
                            formatters: {
                                decimal: function (column, row) {
                                    return row[column.id] == null ? "-" : column.converter.to(row[column.id]);
                                },
                                update: function (column, row) {
                                    if (row.feeManagementVerifyDate == null || row.feeItVerifyDate == null || row.feeSupplyVerifyDate == null || row.feeFacilityVerifyDate == null || row.salesPackageVerifyDate == null) {
                                        return '<button class="btn btn-xs btn-outline-primary" data-command="update" data-row-branch="' + row.branchID + '">Update</button>';
                                    }
                                    else {
                                        return '<button class="btn btn-xs btn-default" disabled>Update</button>';
                                    }
                                },
                                verify: function (column, row) {
                                    if (row[column.id] != null) {
                                        return '<span data-id="verify" class="text-success"><i class="ion-checkmark-round"></i>@* Verified*@</span>';
                                    }
                                },
                            }
                        })
                        .on("loaded.rs.jquery.bootgrid", function () {
                            $.pageLoader("hide");

                            $(this)
                            .find('[data-toggle="tooltip"]').tooltip({
                                container: "body",
                            })
                            .end().find('[data-command="update"]').on("click", function () {
                                $.pageLoader("show");

                                var that = this,
                                    branch = $(that).data("row-branch");

                                $.get(endpoint + "MonthlyExpense/" + branch, {
                                    MonthYear: $("#grid-search-results").data("export-params").MonthYear
                                }, function (response) {
                                    if (response.success) {
                                        var result = response.result[0],
                                            totalManagementFee = 0,
                                            totalServiceFeeIT = 0,
                                            totalServiceFeeSupply = 0,
                                            totalServiceFeeFacility = 0,
                                            totalServiceFeeFacilityVat = 0,
                                            totalSalesPackage = 0,
                                            totalAmountSalesPackage = 0,
                                            totalAdjustment = 0;

                                        $.each(result.monthlyExpenseDetail, function (key, value) {
                                            switch (value.categoryID) {
                                                case 1:
                                                    $("#inputManagementFeeID").val(value.itemID);
                                                    totalManagementFee += value.itemExpense;
                                                    $("#inputManagementFee").val(decimalToString(totalManagementFee));
                                                    break;
                                                case 2:
                                                    renderRow("ServiceFeeIT", value);
                                                    totalServiceFeeIT += value.itemExpense;
                                                    calMonthlyExpense.call(this, "ServiceFeeIT");
                                                    break;
                                                case 3:
                                                    renderRow("ServiceFeeSupply", value);
                                                    totalServiceFeeSupply += value.itemExpense;
                                                    calMonthlyExpense.call(this, "ServiceFeeSupply");
                                                    break;
                                                case 4:
                                                    $('[name="ServiceFeeFacilityID"][data-item-id="' + value.itemDesc + '"]').val(value.itemID);
                                                    $('[name="ServiceFeeFacilityItem"][data-item-id="' + value.itemDesc + '"]').val(value.itemDesc);
                                                    $('[name="ServiceFeeFacilityExpense"][data-item-id="' + value.itemDesc + '"]').val(decimalToString(value.itemExpense));
                                                    $('[name="ServiceFeeFacilityRemark"][data-item-id="' + value.itemDesc + '"]').val(value.remark);

                                                    totalServiceFeeFacility += value.itemExpense;
                                                    calMonthlyExpense.call(this, "ServiceFeeFacility");
                                                    break;
                                                case 5:
                                                    totalSalesPackage += value.itemExpense;
                                                    totalAmountSalesPackage += value.itemAmount;
                                                    var strExpense = value.itemExpense == null ? 0.00 : decimalToString(value.itemExpense);
                                                    var strTotalAmount = numericToString(totalAmountSalesPackage);
                                                    var strTotalExpense = decimalToString(totalSalesPackage);

                                                    $('[name="SalesPackageID"][data-item-id="' + value.itemDesc + '"]').val(value.itemID);
                                                    $('[name="SalesPackageItem"][data-item-id="' + value.itemDesc + '"]').val(value.itemDesc);
                                                    $('[name="SalesPackageAmount"][data-item-id="' + value.itemDesc + '"]').val(numericToString(value.itemAmount));
                                                    $('[name="SalesPackageExpense"][data-item-id="' + value.itemDesc + '"]').val(decimalToString(value.itemExpense));
                                                    $('p[data-item-id="' + value.itemDesc + '"]').text(strExpense);
                                                    $('[name="SalesPackageRemark"][data-item-id="' + value.itemDesc + '"]').val(value.remark);
                                                    calMonthlyExpense.call(this, "SalesPackage");
                                                    break;
                                                case 6:
                                                    $("#inputAdjustmentID").val(value.itemID);
                                                    totalAdjustment += value.itemExpense;
                                                    $("#inputAdjustment").val(decimalToString(totalAdjustment));
                                                    break;
                                            }
                                        });

                                        $('#modalUpdateDetail').find('#inputManagementFee, #inputAdjustment, input.expense').maskMoney({
                                            thousands: ',', decimal: '.', allowZero: true, precision: 2, allowNegative: true
                                        });

                                        $("#fieldsetServiceFeeFacility").prop("disabled", false);
                                        $("#inputManagementFee").prop("disabled", false);
                                        $("#fieldsetServiceFeeIT").prop("disabled", false);
                                        $("#fieldsetServiceFeeSupply").prop("disabled", false);
                                        $("#fieldsetSalesPackage").prop("disabled", false);
                                        $("#inputAdjustment").prop("disabled", false);

                                        if (result.feeManagementVerifyDate !== null) {
                                            $("#inputManagementFee").prop("disabled", true);
                                            $("#inputAdjustment").prop("disabled", true);
                                        }

                                        if (result.feeItVerifyDate !== null) {
                                            $("#fieldsetServiceFeeIT").prop("disabled", true);
                                        }

                                        if (result.feeSupplyVerifyDate !== null) {
                                            $("#fieldsetServiceFeeSupply").prop("disabled", true);
                                        }

                                        if (result.feeFacilityVerifyDate !== null) {
                                            $("#fieldsetServiceFeeFacility").prop("disabled", true);
                                        }

                                        if (result.salesPackageVerifyDate !== null) {
                                            $("#fieldsetSalesPackage").prop("disabled", true);
                                        }

                                        $('#modalUpdateDetail')
                                        .find('span[data-column-id="branchID"]').html(branch)
                                        .end().find('input[data-column-id="branchID"]').val(branch)
                                        .end().css("overflow-y", "scroll").modal({ backdrop: "static", keyboard: false }).modal("show");

                                        $.pageLoader("hide");
                                    }
                                    else {
                                        var message = response.messages.length > 0 ? response.messages[0] : response.errors[0].message;
                                        swal("Error", message, "error");
                                        return false;
                                    }
                                });
                            })
                            .end().find("tr").filter(function (index) {
                                return $('[data-id="verify"]', this).length === 4;
                            }).addClass("bg-m-gray bg-m-lighten-3 text-m-gray").find(".select-box").prop("disabled", true).removeClass("select-box").addClass("select-box-disabled");
                        });

                        $("#card-search-results, #card-search-status").delay(500).fadeIn(300);
                    }
                    else {
                        gridSearchResults.bootgrid("reload");
                    }
                }
            });

            // FORM UPDATE DETAIL
            // ======================
            $("#formUpdateDetail").validate({
                submitHandler: function (form) {
                    swal({
                        title: "Are you sure?",
                        text: "Confirm this information to be recorded",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: "btn-outline-primary",
                        confirmButtonText: "Yes, confirm it!",
                        closeOnConfirm: false,
                    }, function () {
                        $.pageLoader("show");
                        var $form = $(form);

                        $.ajax({
                            url: endpoint + "MonthlyExpense",
                            type: "POST",
                            data: new FormData($form.get(0)),
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (response) {
                                if (response.success) {
                                    swal("Confirmed", response.messages[0], "success");
                                    $("#modalUpdateDetail").modal("hide");
                                    $("#grid-search-results").bootgrid("reload");
                                }
                                else {
                                    var message = response.messages.length > 0 ? response.messages[0] : response.errors[0].message;
                                    swal("Error", message, "error");
                                    return false;
                                }
                                $.pageLoader("hide");
                            }
                        });

                    });
                }
            });

            // EXPORT
            // ======================
            $("body").on("click", '[data-ke-action="export"]', function (e) {
                var $this = $(this),
                    $target = $($this.data("ke-target")),
                    params = $target.data("export-params"),
                    filetype = $this.data("ke-filetype");

                params.filetype = filetype;

                var form = $('<form/>');

                form.attr('action', endpoint + 'MonthlyExpense/Get').attr('method', 'POST').attr('target', '_blank');


                $.each(params, function (k, v) {
                    if (typeof v !== 'undefined') {
                        $(form).append($('<input name="' + k + '" value="' + v + '" type="hidden">'));
                    }
                });

                $('body').append(form);

                form.submit();
                form.remove();
            });
        });
    </script>
}

<div class="block-header">
    <h2 class="block-title">Monthly Expense Update for RT</h2>
</div>

@await Html.PartialAsync("Shared/_FormSearchFCBranchMonthlyPartial")

<div id="card-search-results" class="card" style="display:none;">
    <div class="card-body table-responsive">
        <div>
            <table id="grid-search-results" class="table table-card table-bordered table-condensed table-hover unordered">
                <thead>
                    <tr>
                        <th data-css-class="bg-m-gray bg-m-lighten-4" data-header-css-class="bg-m-gray bg-m-lighten-3" data-column-id="erpid" data-identifier="true">@SharedLocalizer["Branch"]</th>
                        <th data-css-class="bg-m-blue bg-m-lighten-5" data-header-css-class="bg-m-blue bg-m-lighten-4" data-column-id="branchID">@SharedLocalizer["Branch"]</th>

                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="managementFee">@Localizer["Management Fee"]</th>
                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="serviceFeeIT">@Localizer["Service Fee - IT"]</th>
                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="serviceFeeSupply">@Localizer["Service Fee - Supply"]</th>
                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="facilityVat">@Localizer["Facility"]</th>
                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="salesPackage">@Localizer["Sales Package"]</th>
                        <th data-type="decimal" data-formatter="decimal" data-header-css-class="bg-m-orange bg-m-lighten-5 text-right" data-css-class="text-right" data-column-id="adjustment">@Localizer["Adjustment"]</th>
                        <th data-formatter="update" data-sortable="false" data-header-css-class="bg-m-orange bg-m-lighten-5 text-center" data-css-class="text-center" data-column-id="update">@Localizer["Update"]</th>
                        <th data-formatter="verify" data-sortable="false" data-header-css-class="bg-m-orange bg-m-lighten-5 text-center" data-css-class="text-center" data-column-id="feeFacilityVerifyDate">@Localizer["ACC"]</th>
                        <th data-formatter="verify" data-sortable="false" data-header-css-class="bg-m-orange bg-m-lighten-5 text-center" data-css-class="text-center" data-column-id="salesPackageVerifyDate">@Localizer["Ops"]</th>
                        <th data-formatter="verify" data-sortable="false" data-header-css-class="bg-m-orange bg-m-lighten-5 text-center" data-css-class="text-center" data-column-id="feeManagementVerifyDate">@Localizer["RT"]</th>
                        <th data-formatter="verify" data-sortable="false" data-header-css-class="bg-m-orange bg-m-lighten-5 text-center" data-css-class="text-center" data-column-id="feeSupplyVerifyDate">@Localizer["RT Supply"]</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

@await Html.PartialAsync("Shared/_ModalMonthlyExpenseUpdatePartial")